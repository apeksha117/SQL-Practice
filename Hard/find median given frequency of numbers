Table: Numbers

+-------------+------+
| Column Name | Type |
+-------------+------+
| num         | int  |
| frequency   | int  |
+-------------+------+
num is the primary key (column with unique values) for this table.
Each row of this table shows the frequency of a number in the database.
 

The median is the value separating the higher half from the lower half of a data sample.

Write a solution to report the median of all the numbers in the database after decompressing the Numbers table. Round the median to one decimal point.

The result format is in the following example.

 

Example 1:

Input: 
Numbers table:
+-----+-----------+
| num | frequency |
+-----+-----------+
| 0   | 7         |
| 1   | 1         |
| 2   | 3         |
| 3   | 1         |
+-----+-----------+
Output: 
+--------+
| median |
+--------+
| 0.0    |
+--------+
Explanation: 
If we decompress the Numbers table, we will get [0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3], so the median is (0 + 0) / 2 = 0.

solution-
select 
avg(temp.num) as median
from
(select num, frequency, sum(frequency) over(order by num asc) as cum_freq, sum(frequency) over()/2 as med_freq from Numbers) temp
WHERE med_freq BETWEEN (cum_freq - frequency) AND cum_freq;

Python-

import pandas as pd

def median_frequency(numbers: pd.DataFrame) -> pd.DataFrame:
  numbers["cum_sum"]=numbers["frequency"].cumsum()
  numbers["center"]=numbers["frequency"].sum()/2
  for i in range(len(numbers)):
    if numbers["center"][i]>(numbers["cum_sum"][i] - numbers["frequency"][i]) and numbers["center"][i]<numbers["cum_sum"][i]:
      median= numbers["num"][i]
      return pd.DataFrame({'median': median}, index=[0])

    
